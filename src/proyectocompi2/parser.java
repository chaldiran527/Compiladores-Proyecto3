
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyectocompi2;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.io.IOException;
import java.io.FileWriter;
import java.util.List;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\045\002\000\002\044" +
    "\004\000\002\046\002\000\002\004\004\000\002\005\003" +
    "\000\002\005\004\000\002\006\004\000\002\007\007\000" +
    "\002\007\007\000\002\007\007\000\002\047\002\000\002" +
    "\007\011\000\002\050\002\000\002\007\011\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\010\005\000\002\010\005\000\002\015" +
    "\003\000\002\015\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\003\000\002\016\004\000\002\016\005\000" +
    "\002\016\007\000\002\016\011\000\002\016\005\000\002" +
    "\016\003\000\002\016\004\000\002\016\004\000\002\017" +
    "\005\000\002\017\007\000\002\017\010\000\002\017\012" +
    "\000\002\017\011\000\002\020\010\000\002\020\005\000" +
    "\002\021\006\000\002\027\005\000\002\027\006\000\002" +
    "\027\003\000\002\031\005\000\002\031\006\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\006\000" +
    "\002\022\005\000\002\022\005\000\002\022\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\036\013\000\002\036\012\000\002\033\011" +
    "\000\002\033\010\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\035\015\000\002\035\014\000\002" +
    "\037\011\000\002\037\015\000\002\037\012\000\002\037" +
    "\016\000\002\040\003\000\002\040\004\000\002\041\003" +
    "\000\002\041\004\000\002\042\011\000\002\043\006\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\013" +
    "\003\000\002\013\005\000\002\014\003\000\002\011\003" +
    "\000\002\011\005\000\002\012\004\000\002\023\005\000" +
    "\002\023\005\000\002\023\004\000\002\026\004\000\002" +
    "\026\004\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\004\070\000\001\002\000\004\070\ufffe\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\070\013\001\002\000\004\002\uffff\001\002\000" +
    "\004\004\052\001\002\000\006\002\ufffd\070\013\001\002" +
    "\000\016\013\016\014\021\015\023\021\017\067\020\073" +
    "\022\001\002\000\006\002\ufffc\070\ufffc\001\002\000\004" +
    "\062\043\001\002\000\004\062\ufff1\001\002\000\006\062" +
    "\ufff2\072\040\001\002\000\004\062\024\001\002\000\004" +
    "\062\uffef\001\002\000\004\062\uffee\001\002\000\004\062" +
    "\ufff0\001\002\000\004\010\025\001\002\000\016\011\027" +
    "\013\ufff4\014\ufff4\015\ufff4\021\ufff4\073\ufff4\001\002\000" +
    "\014\013\016\014\021\015\023\021\031\073\022\001\002" +
    "\000\004\004\ufff7\001\002\000\004\062\037\001\002\000" +
    "\004\062\ufff2\001\002\000\006\011\034\012\035\001\002" +
    "\000\006\011\uffa1\012\uffa1\001\002\000\004\004\ufff3\001" +
    "\002\000\014\013\016\014\021\015\023\021\031\073\022" +
    "\001\002\000\006\011\uffa0\012\uffa0\001\002\000\006\011" +
    "\uff9f\012\uff9f\001\002\000\004\010\041\001\002\000\004" +
    "\011\042\001\002\000\004\004\ufff9\001\002\000\004\010" +
    "\044\001\002\000\016\011\046\013\ufff6\014\ufff6\015\ufff6" +
    "\021\ufff6\073\ufff6\001\002\000\014\013\016\014\021\015" +
    "\023\021\031\073\022\001\002\000\004\004\ufff8\001\002" +
    "\000\006\011\050\012\035\001\002\000\004\004\ufff5\001" +
    "\002\000\006\002\ufffb\070\ufffb\001\002\000\060\003\102" +
    "\004\052\006\062\010\104\016\075\017\061\022\107\032" +
    "\121\033\076\043\073\046\115\047\114\050\120\053\072" +
    "\054\071\057\077\060\122\062\060\066\064\074\056\075" +
    "\117\077\067\100\111\001\002\000\006\002\ufffa\070\ufffa" +
    "\001\002\000\062\003\uffc0\004\uffc0\005\uffc0\006\uffc0\010" +
    "\uffc0\016\uffc0\017\uffc0\022\uffc0\032\uffc0\033\uffc0\043\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\053\uffc0\054\uffc0\057\uffc0\060" +
    "\uffc0\062\uffc0\066\uffc0\074\uffc0\075\uffc0\077\uffc0\100\uffc0" +
    "\001\002\000\062\003\210\004\052\005\366\006\062\010" +
    "\104\016\075\017\061\022\107\032\121\033\076\043\073" +
    "\046\115\047\114\050\120\053\072\054\071\057\077\060" +
    "\122\062\060\066\064\074\056\075\117\077\067\100\111" +
    "\001\002\000\052\005\uffeb\007\uffeb\011\uffeb\012\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042" +
    "\uffeb\044\uffeb\045\uffeb\001\002\000\052\005\uffca\007\uffca" +
    "\011\uffca\012\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027" +
    "\uffca\030\uffca\031\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\044\uffca\045\uffca\001\002\000" +
    "\050\006\362\010\172\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\044\uffc6\045\uffc6\065\361" +
    "\001\002\000\052\005\uffed\007\uffed\011\uffed\012\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042" +
    "\uffed\044\uffed\045\uffed\001\002\000\034\006\062\010\104" +
    "\016\075\017\061\022\107\032\121\033\076\043\073\046" +
    "\115\047\114\062\126\074\056\100\111\001\002\000\004" +
    "\031\355\001\002\000\034\006\062\010\104\016\075\017" +
    "\061\022\107\032\121\033\076\043\073\046\115\047\114" +
    "\062\126\074\056\100\111\001\002\000\052\005\uffc7\007" +
    "\uffc7\011\uffc7\012\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\044\uffc7\045\uffc7\001\002" +
    "\000\062\003\uffbe\004\uffbe\005\uffbe\006\uffbe\010\uffbe\016" +
    "\uffbe\017\uffbe\022\uffbe\032\uffbe\033\uffbe\043\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\053\uffbe\054\uffbe\057\uffbe\060\uffbe\062" +
    "\uffbe\066\uffbe\074\uffbe\075\uffbe\077\uffbe\100\uffbe\001\002" +
    "\000\004\010\342\001\002\000\052\005\uffcb\007\uffcb\011" +
    "\uffcb\012\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\044\uffcb\045\uffcb\001\002\000\004" +
    "\004\324\001\002\000\004\010\301\001\002\000\034\006" +
    "\062\010\104\016\075\017\061\022\107\032\121\033\076" +
    "\043\073\046\115\047\114\062\126\074\056\100\111\001" +
    "\002\000\042\023\133\024\140\025\143\026\136\027\151" +
    "\030\134\031\277\034\147\035\142\036\141\037\146\040" +
    "\135\041\144\042\145\044\137\045\150\001\002\000\052" +
    "\005\uffea\007\uffea\011\uffea\012\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\044\uffea\045" +
    "\uffea\001\002\000\004\062\276\001\002\000\004\031\275" +
    "\001\002\000\052\005\uffc2\007\uffc2\011\uffc2\012\uffc2\023" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\044\uffc2\045\uffc2\001\002\000\062\003\uffe5\004\uffe5" +
    "\005\uffe5\006\uffe5\010\uffe5\016\uffe5\017\uffe5\022\uffe5\032" +
    "\uffe5\033\uffe5\043\uffe5\046\uffe5\047\uffe5\050\uffe5\053\uffe5" +
    "\054\uffe5\057\uffe5\060\uffe5\062\uffe5\066\uffe5\074\uffe5\075" +
    "\uffe5\077\uffe5\100\uffe5\001\002\000\006\005\274\031\211" +
    "\001\002\000\052\005\uffc8\007\uffc8\011\uffc8\012\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\044\uffc8\045\uffc8\001\002\000\034\006\062\010\104" +
    "\016\075\017\061\022\107\032\121\033\076\043\073\046" +
    "\115\047\114\062\126\074\056\100\111\001\002\000\052" +
    "\005\uffce\007\uffce\011\uffce\012\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\044\uffce\045" +
    "\uffce\001\002\000\004\031\271\001\002\000\052\005\uffec" +
    "\007\uffec\011\uffec\012\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\041\uffec\042\uffec\044\uffec\045\uffec\001" +
    "\002\000\062\003\uffbf\004\uffbf\005\uffbf\006\uffbf\010\uffbf" +
    "\016\uffbf\017\uffbf\022\uffbf\032\uffbf\033\uffbf\043\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\053\uffbf\054\uffbf\057\uffbf\060\uffbf" +
    "\062\uffbf\066\uffbf\074\uffbf\075\uffbf\077\uffbf\100\uffbf\001" +
    "\002\000\004\010\265\001\002\000\062\003\uffc1\004\uffc1" +
    "\005\uffc1\006\uffc1\010\uffc1\016\uffc1\017\uffc1\022\uffc1\032" +
    "\uffc1\033\uffc1\043\uffc1\046\uffc1\047\uffc1\050\uffc1\053\uffc1" +
    "\054\uffc1\057\uffc1\060\uffc1\062\uffc1\066\uffc1\074\uffc1\075" +
    "\uffc1\077\uffc1\100\uffc1\001\002\000\062\003\uffe1\004\uffe1" +
    "\005\uffe1\006\uffe1\010\uffe1\016\uffe1\017\uffe1\022\uffe1\032" +
    "\uffe1\033\uffe1\043\uffe1\046\uffe1\047\uffe1\050\uffe1\053\uffe1" +
    "\054\uffe1\057\uffe1\060\uffe1\062\uffe1\066\uffe1\074\uffe1\075" +
    "\uffe1\077\uffe1\100\uffe1\001\002\000\052\005\uffe9\007\uffe9" +
    "\011\uffe9\012\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\044\uffe9\045\uffe9\001\002\000" +
    "\052\005\uffe8\007\uffe8\011\uffe8\012\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\044\uffe8" +
    "\045\uffe8\001\002\000\062\003\uffdb\004\uffdb\005\uffdb\006" +
    "\uffdb\010\uffdb\016\uffdb\017\uffdb\022\uffdb\032\uffdb\033\uffdb" +
    "\043\uffdb\046\uffdb\047\uffdb\050\uffdb\053\uffdb\054\uffdb\057" +
    "\uffdb\060\uffdb\062\uffdb\066\uffdb\074\uffdb\075\uffdb\077\uffdb" +
    "\100\uffdb\001\002\000\014\013\016\014\021\015\023\021" +
    "\031\073\022\001\002\000\004\010\215\001\002\000\004" +
    "\062\214\001\002\000\004\010\124\001\002\000\052\005" +
    "\uffc9\007\uffc9\011\uffc9\012\uffc9\023\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\044\uffc9\045\uffc9" +
    "\001\002\000\034\006\062\010\104\016\075\017\061\022" +
    "\107\032\121\033\076\043\073\046\127\047\130\062\126" +
    "\074\056\100\111\001\002\000\004\011\204\001\002\000" +
    "\056\005\uffc6\006\171\007\uffc6\010\172\011\uffc6\012\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\044\uffc6\045\uffc6\001\002\000\042\011\uffb8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\044" +
    "\uffe8\045\uffe8\001\002\000\042\011\uffb9\023\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\044\uffe9\045\uffe9" +
    "\001\002\000\042\011\uffb7\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\044\uffca\045\uffca\001\002\000" +
    "\040\023\133\024\140\025\143\026\136\027\151\030\134" +
    "\034\147\035\142\036\141\037\146\040\135\041\144\042" +
    "\145\044\137\045\150\001\002\000\034\006\062\010\104" +
    "\016\075\017\061\022\107\032\121\033\076\043\073\046" +
    "\115\047\114\062\126\074\056\100\111\001\002\000\034" +
    "\006\062\010\104\016\075\017\061\022\107\032\121\033" +
    "\076\043\073\046\115\047\114\062\126\074\056\100\111" +
    "\001\002\000\034\006\062\010\104\016\075\017\061\022" +
    "\107\032\121\033\076\043\073\046\115\047\114\062\126" +
    "\074\056\100\111\001\002\000\034\006\062\010\104\016" +
    "\075\017\061\022\107\032\121\033\076\043\073\046\115" +
    "\047\114\062\126\074\056\100\111\001\002\000\034\006" +
    "\062\010\104\016\075\017\061\022\107\032\121\033\076" +
    "\043\073\046\115\047\114\062\126\074\056\100\111\001" +
    "\002\000\034\006\062\010\104\016\075\017\061\022\107" +
    "\032\121\033\076\043\073\046\115\047\114\062\126\074" +
    "\056\100\111\001\002\000\034\006\062\010\104\016\075" +
    "\017\061\022\107\032\121\033\076\043\073\046\115\047" +
    "\114\062\126\074\056\100\111\001\002\000\034\006\062" +
    "\010\104\016\075\017\061\022\107\032\121\033\076\043" +
    "\073\046\115\047\114\062\126\074\056\100\111\001\002" +
    "\000\034\006\062\010\104\016\075\017\061\022\107\032" +
    "\121\033\076\043\073\046\115\047\114\062\126\074\056" +
    "\100\111\001\002\000\034\006\062\010\104\016\075\017" +
    "\061\022\107\032\121\033\076\043\073\046\115\047\114" +
    "\062\126\074\056\100\111\001\002\000\034\006\062\010" +
    "\104\016\075\017\061\022\107\032\121\033\076\043\073" +
    "\046\115\047\114\062\126\074\056\100\111\001\002\000" +
    "\034\006\062\010\104\016\075\017\061\022\107\032\121" +
    "\033\076\043\073\046\115\047\114\062\126\074\056\100" +
    "\111\001\002\000\034\006\062\010\104\016\075\017\061" +
    "\022\107\032\121\033\076\043\073\046\115\047\114\062" +
    "\126\074\056\100\111\001\002\000\034\006\062\010\104" +
    "\016\075\017\061\022\107\032\121\033\076\043\073\046" +
    "\115\047\114\062\126\074\056\100\111\001\002\000\034" +
    "\006\062\010\104\016\075\017\061\022\107\032\121\033" +
    "\076\043\073\046\115\047\114\062\126\074\056\100\111" +
    "\001\002\000\052\005\uffa6\007\uffa6\011\uffa6\012\uffa6\023" +
    "\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\044\137\045\150\001\002\000\052\005\uff9d\007\uff9d" +
    "\011\uff9d\012\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027" +
    "\uff9d\030\uff9d\031\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d" +
    "\040\uff9d\041\uff9d\042\uff9d\044\uff9d\045\uff9d\001\002\000" +
    "\052\005\uff99\007\uff99\011\uff99\012\uff99\023\133\024\140" +
    "\025\143\026\136\027\151\030\134\031\uff99\034\uff99\035" +
    "\uff99\036\141\037\146\040\135\041\144\042\145\044\137" +
    "\045\150\001\002\000\052\005\uff96\007\uff96\011\uff96\012" +
    "\uff96\023\133\024\140\025\143\026\136\027\151\030\134" +
    "\031\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041" +
    "\144\042\145\044\137\045\150\001\002\000\052\005\uff93" +
    "\007\uff93\011\uff93\012\uff93\023\133\024\140\025\143\026" +
    "\136\027\151\030\134\031\uff93\034\uff93\035\uff93\036\uff93" +
    "\037\uff93\040\uff93\041\uff93\042\uff93\044\137\045\150\001" +
    "\002\000\052\005\uff94\007\uff94\011\uff94\012\uff94\023\133" +
    "\024\140\025\143\026\136\027\151\030\134\031\uff94\034" +
    "\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94" +
    "\044\137\045\150\001\002\000\052\005\uffaa\007\uffaa\011" +
    "\uffaa\012\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\044\137\045\150\001\002\000\052" +
    "\005\uff98\007\uff98\011\uff98\012\uff98\023\133\024\140\025" +
    "\143\026\136\027\151\030\134\031\uff98\034\uff98\035\uff98" +
    "\036\141\037\146\040\135\041\144\042\145\044\137\045" +
    "\150\001\002\000\052\005\uff97\007\uff97\011\uff97\012\uff97" +
    "\023\133\024\140\025\143\026\136\027\151\030\134\031" +
    "\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\144" +
    "\042\145\044\137\045\150\001\002\000\052\005\uffa7\007" +
    "\uffa7\011\uffa7\012\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\044\137\045\150\001\002" +
    "\000\052\005\uff9e\007\uff9e\011\uff9e\012\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\034\uff9e" +
    "\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\044" +
    "\uff9e\045\150\001\002\000\052\005\uffa9\007\uffa9\011\uffa9" +
    "\012\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\044\137\045\150\001\002\000\052\005" +
    "\uff95\007\uff95\011\uff95\012\uff95\023\133\024\140\025\143" +
    "\026\136\027\151\030\134\031\uff95\034\uff95\035\uff95\036" +
    "\uff95\037\uff95\040\uff95\041\144\042\145\044\137\045\150" +
    "\001\002\000\052\005\uffa5\007\uffa5\011\uffa5\012\uffa5\023" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\044\137\045\150\001\002\000\052\005\uffa8\007\uffa8" +
    "\011\uffa8\012\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\042\uffa8\044\137\045\150\001\002\000" +
    "\034\006\062\010\104\016\075\017\061\022\107\032\121" +
    "\033\076\043\073\046\115\047\114\062\126\074\056\100" +
    "\111\001\002\000\036\006\062\010\104\011\173\016\075" +
    "\017\061\022\107\032\121\033\076\043\073\046\115\047" +
    "\114\062\126\074\056\100\111\001\002\000\052\005\uffd0" +
    "\007\uffd0\011\uffd0\012\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\042\uffd0\044\uffd0\045\uffd0\001" +
    "\002\000\006\011\177\012\200\001\002\000\050\005\uffa2" +
    "\007\uffa2\011\uffa2\012\uffa2\023\133\024\140\025\143\026" +
    "\136\027\151\030\134\034\147\035\142\036\141\037\146" +
    "\040\135\041\144\042\145\044\137\045\150\001\002\000" +
    "\012\005\uffa4\007\uffa4\011\uffa4\012\uffa4\001\002\000\052" +
    "\005\uffcf\007\uffcf\011\uffcf\012\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\044\uffcf\045" +
    "\uffcf\001\002\000\034\006\062\010\104\016\075\017\061" +
    "\022\107\032\121\033\076\043\073\046\115\047\114\062" +
    "\126\074\056\100\111\001\002\000\012\005\uffa3\007\uffa3" +
    "\011\uffa3\012\uffa3\001\002\000\042\007\203\023\133\024" +
    "\140\025\143\026\136\027\151\030\134\034\147\035\142" +
    "\036\141\037\146\040\135\041\144\042\145\044\137\045" +
    "\150\001\002\000\052\005\uffc5\007\uffc5\011\uffc5\012\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\044\uffc5\045\uffc5\001\002\000\004\004\205\001" +
    "\002\000\062\003\210\004\052\005\207\006\062\010\104" +
    "\016\075\017\061\022\107\032\121\033\076\043\073\046" +
    "\115\047\114\050\120\053\072\054\071\057\077\060\122" +
    "\062\060\066\064\074\056\075\117\077\067\100\111\001" +
    "\002\000\062\003\210\004\052\005\212\006\062\010\104" +
    "\016\075\017\061\022\107\032\121\033\076\043\073\046" +
    "\115\047\114\050\120\053\072\054\071\057\077\060\122" +
    "\062\060\066\064\074\056\075\117\077\067\100\111\001" +
    "\002\000\062\003\uffba\004\uffba\005\uffba\006\uffba\010\uffba" +
    "\016\uffba\017\uffba\022\uffba\032\uffba\033\uffba\043\uffba\046" +
    "\uffba\047\uffba\050\uffba\053\uffba\054\uffba\057\uffba\060\uffba" +
    "\062\uffba\066\uffba\074\uffba\075\uffba\077\uffba\100\uffba\001" +
    "\002\000\004\031\211\001\002\000\062\003\uffd9\004\uffd9" +
    "\005\uffd9\006\uffd9\010\uffd9\016\uffd9\017\uffd9\022\uffd9\032" +
    "\uffd9\033\uffd9\043\uffd9\046\uffd9\047\uffd9\050\uffd9\053\uffd9" +
    "\054\uffd9\057\uffd9\060\uffd9\062\uffd9\066\uffd9\074\uffd9\075" +
    "\uffd9\077\uffd9\100\uffd9\001\002\000\062\003\uffbb\004\uffbb" +
    "\005\uffbb\006\uffbb\010\uffbb\016\uffbb\017\uffbb\022\uffbb\032" +
    "\uffbb\033\uffbb\043\uffbb\046\uffbb\047\uffbb\050\uffbb\053\uffbb" +
    "\054\uffbb\057\uffbb\060\uffbb\062\uffbb\066\uffbb\074\uffbb\075" +
    "\uffbb\077\uffbb\100\uffbb\001\002\000\062\003\uffe4\004\uffe4" +
    "\005\uffe4\006\uffe4\010\uffe4\016\uffe4\017\uffe4\022\uffe4\032" +
    "\uffe4\033\uffe4\043\uffe4\046\uffe4\047\uffe4\050\uffe4\053\uffe4" +
    "\054\uffe4\057\uffe4\060\uffe4\062\uffe4\066\uffe4\074\uffe4\075" +
    "\uffe4\077\uffe4\100\uffe4\001\002\000\052\005\uff9b\007\uff9b" +
    "\011\uff9b\012\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027" +
    "\uff9b\030\uff9b\031\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b" +
    "\040\uff9b\041\uff9b\042\uff9b\044\uff9b\045\uff9b\001\002\000" +
    "\034\006\062\010\104\016\075\017\061\022\107\032\121" +
    "\033\076\043\073\046\127\047\130\062\126\074\056\100" +
    "\111\001\002\000\004\011\217\001\002\000\004\004\220" +
    "\001\002\000\060\003\210\004\052\006\062\010\104\016" +
    "\075\017\061\022\107\032\121\033\076\043\073\046\115" +
    "\047\114\050\120\053\072\054\071\057\077\060\122\062" +
    "\060\066\064\074\056\075\117\077\067\100\111\001\002" +
    "\000\062\003\210\004\052\005\222\006\062\010\104\016" +
    "\075\017\061\022\107\032\121\033\076\043\073\046\115" +
    "\047\114\050\120\053\072\054\071\057\077\060\122\062" +
    "\060\066\064\074\056\075\117\077\067\100\111\001\002" +
    "\000\066\003\uffb4\004\uffb4\005\uffb4\006\uffb4\010\uffb4\016" +
    "\uffb4\017\uffb4\022\uffb4\032\uffb4\033\uffb4\043\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\224\052\223\053\uffb4\054\uffb4\057" +
    "\uffb4\060\uffb4\062\uffb4\066\uffb4\074\uffb4\075\uffb4\077\uffb4" +
    "\100\uffb4\001\002\000\004\004\245\001\002\000\004\010" +
    "\237\001\002\000\066\003\uffae\004\uffae\005\uffae\006\uffae" +
    "\010\uffae\016\uffae\017\uffae\022\uffae\032\uffae\033\uffae\043" +
    "\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae" +
    "\054\uffae\057\uffae\060\uffae\062\uffae\066\uffae\074\uffae\075" +
    "\uffae\077\uffae\100\uffae\001\002\000\066\003\uffb0\004\uffb0" +
    "\005\uffb0\006\uffb0\010\uffb0\016\uffb0\017\uffb0\022\uffb0\032" +
    "\uffb0\033\uffb0\043\uffb0\046\uffb0\047\uffb0\050\uffb0\051\224" +
    "\052\uffb0\053\uffb0\054\uffb0\057\uffb0\060\uffb0\062\uffb0\066" +
    "\uffb0\074\uffb0\075\uffb0\077\uffb0\100\uffb0\001\002\000\064" +
    "\003\uffb2\004\uffb2\005\uffb2\006\uffb2\010\uffb2\016\uffb2\017" +
    "\uffb2\022\uffb2\032\uffb2\033\uffb2\043\uffb2\046\uffb2\047\uffb2" +
    "\050\uffb2\052\233\053\uffb2\054\uffb2\057\uffb2\060\uffb2\062" +
    "\uffb2\066\uffb2\074\uffb2\075\uffb2\077\uffb2\100\uffb2\001\002" +
    "\000\004\051\224\001\002\000\066\003\uffaf\004\uffaf\005" +
    "\uffaf\006\uffaf\010\uffaf\016\uffaf\017\uffaf\022\uffaf\032\uffaf" +
    "\033\uffaf\043\uffaf\046\uffaf\047\uffaf\050\uffaf\051\224\052" +
    "\uffaf\053\uffaf\054\uffaf\057\uffaf\060\uffaf\062\uffaf\066\uffaf" +
    "\074\uffaf\075\uffaf\077\uffaf\100\uffaf\001\002\000\066\003" +
    "\uffad\004\uffad\005\uffad\006\uffad\010\uffad\016\uffad\017\uffad" +
    "\022\uffad\032\uffad\033\uffad\043\uffad\046\uffad\047\uffad\050" +
    "\uffad\051\uffad\052\uffad\053\uffad\054\uffad\057\uffad\060\uffad" +
    "\062\uffad\066\uffad\074\uffad\075\uffad\077\uffad\100\uffad\001" +
    "\002\000\004\004\234\001\002\000\060\003\210\004\052" +
    "\006\062\010\104\016\075\017\061\022\107\032\121\033" +
    "\076\043\073\046\115\047\114\050\120\053\072\054\071" +
    "\057\077\060\122\062\060\066\064\074\056\075\117\077" +
    "\067\100\111\001\002\000\062\003\210\004\052\005\236" +
    "\006\062\010\104\016\075\017\061\022\107\032\121\033" +
    "\076\043\073\046\115\047\114\050\120\053\072\054\071" +
    "\057\077\060\122\062\060\066\064\074\056\075\117\077" +
    "\067\100\111\001\002\000\062\003\uffb1\004\uffb1\005\uffb1" +
    "\006\uffb1\010\uffb1\016\uffb1\017\uffb1\022\uffb1\032\uffb1\033" +
    "\uffb1\043\uffb1\046\uffb1\047\uffb1\050\uffb1\053\uffb1\054\uffb1" +
    "\057\uffb1\060\uffb1\062\uffb1\066\uffb1\074\uffb1\075\uffb1\077" +
    "\uffb1\100\uffb1\001\002\000\034\006\062\010\104\016\075" +
    "\017\061\022\107\032\121\033\076\043\073\046\127\047" +
    "\130\062\126\074\056\100\111\001\002\000\004\011\241" +
    "\001\002\000\004\004\242\001\002\000\060\003\210\004" +
    "\052\006\062\010\104\016\075\017\061\022\107\032\121" +
    "\033\076\043\073\046\115\047\114\050\120\053\072\054" +
    "\071\057\077\060\122\062\060\066\064\074\056\075\117" +
    "\077\067\100\111\001\002\000\062\003\210\004\052\005" +
    "\244\006\062\010\104\016\075\017\061\022\107\032\121" +
    "\033\076\043\073\046\115\047\114\050\120\053\072\054" +
    "\071\057\077\060\122\062\060\066\064\074\056\075\117" +
    "\077\067\100\111\001\002\000\066\003\uffac\004\uffac\005" +
    "\uffac\006\uffac\010\uffac\016\uffac\017\uffac\022\uffac\032\uffac" +
    "\033\uffac\043\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052" +
    "\uffac\053\uffac\054\uffac\057\uffac\060\uffac\062\uffac\066\uffac" +
    "\074\uffac\075\uffac\077\uffac\100\uffac\001\002\000\060\003" +
    "\210\004\052\006\062\010\104\016\075\017\061\022\107" +
    "\032\121\033\076\043\073\046\115\047\114\050\120\053" +
    "\072\054\071\057\077\060\122\062\060\066\064\074\056" +
    "\075\117\077\067\100\111\001\002\000\062\003\210\004" +
    "\052\005\247\006\062\010\104\016\075\017\061\022\107" +
    "\032\121\033\076\043\073\046\115\047\114\050\120\053" +
    "\072\054\071\057\077\060\122\062\060\066\064\074\056" +
    "\075\117\077\067\100\111\001\002\000\064\003\uffb3\004" +
    "\uffb3\005\uffb3\006\uffb3\010\uffb3\016\uffb3\017\uffb3\022\uffb3" +
    "\032\uffb3\033\uffb3\043\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffab\053\uffb3\054\uffb3\057\uffb3\060\uffb3\062\uffb3\066\uffb3" +
    "\074\uffb3\075\uffb3\077\uffb3\100\uffb3\001\002\000\004\062" +
    "\251\001\002\000\010\006\253\031\uffd8\065\252\001\002" +
    "\000\034\006\062\010\104\016\075\017\061\022\107\032" +
    "\121\033\076\043\073\046\115\047\114\062\126\074\056" +
    "\100\111\001\002\000\034\006\062\010\104\016\075\017" +
    "\061\022\107\032\121\033\076\043\073\046\115\047\114" +
    "\062\126\074\056\100\111\001\002\000\042\007\255\023" +
    "\133\024\140\025\143\026\136\027\151\030\134\034\147" +
    "\035\142\036\141\037\146\040\135\041\144\042\145\044" +
    "\137\045\150\001\002\000\006\031\uffd6\065\256\001\002" +
    "\000\036\004\260\006\062\010\104\016\075\017\061\022" +
    "\107\032\121\033\076\043\073\046\115\047\114\062\126" +
    "\074\056\100\111\001\002\000\004\031\uffd4\001\002\000" +
    "\034\006\062\010\104\016\075\017\061\022\107\032\121" +
    "\033\076\043\073\046\115\047\114\062\126\074\056\100" +
    "\111\001\002\000\042\023\133\024\140\025\143\026\136" +
    "\027\151\030\134\031\uffd5\034\147\035\142\036\141\037" +
    "\146\040\135\041\144\042\145\044\137\045\150\001\002" +
    "\000\006\005\263\012\200\001\002\000\004\031\uffd1\001" +
    "\002\000\042\023\133\024\140\025\143\026\136\027\151" +
    "\030\134\031\uffd7\034\147\035\142\036\141\037\146\040" +
    "\135\041\144\042\145\044\137\045\150\001\002\000\036" +
    "\006\062\010\104\011\266\016\075\017\061\022\107\032" +
    "\121\033\076\043\073\046\115\047\114\062\126\074\056" +
    "\100\111\001\002\000\052\005\uffcd\007\uffcd\011\uffcd\012" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\044\uffcd\045\uffcd\001\002\000\006\011\270" +
    "\012\200\001\002\000\052\005\uffcc\007\uffcc\011\uffcc\012" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\044\uffcc\045\uffcc\001\002\000\062\003\uffe3" +
    "\004\uffe3\005\uffe3\006\uffe3\010\uffe3\016\uffe3\017\uffe3\022" +
    "\uffe3\032\uffe3\033\uffe3\043\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\053\uffe3\054\uffe3\057\uffe3\060\uffe3\062\uffe3\066\uffe3\074" +
    "\uffe3\075\uffe3\077\uffe3\100\uffe3\001\002\000\006\011\273" +
    "\012\200\001\002\000\052\005\uffc4\007\uffc4\011\uffc4\012" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\044\uffc4\045\uffc4\001\002\000\066\002\uffe6" +
    "\003\uffe6\004\uffe6\005\uffe6\006\uffe6\010\uffe6\016\uffe6\017" +
    "\uffe6\022\uffe6\032\uffe6\033\uffe6\043\uffe6\046\uffe6\047\uffe6" +
    "\050\uffe6\053\uffe6\054\uffe6\057\uffe6\060\uffe6\062\uffe6\066" +
    "\uffe6\070\uffe6\074\uffe6\075\uffe6\077\uffe6\100\uffe6\001\002" +
    "\000\062\003\uffda\004\uffda\005\uffda\006\uffda\010\uffda\016" +
    "\uffda\017\uffda\022\uffda\032\uffda\033\uffda\043\uffda\046\uffda" +
    "\047\uffda\050\uffda\053\uffda\054\uffda\057\uffda\060\uffda\062" +
    "\uffda\066\uffda\074\uffda\075\uffda\077\uffda\100\uffda\001\002" +
    "\000\052\005\uff9a\007\uff9a\011\uff9a\012\uff9a\023\uff9a\024" +
    "\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\034\uff9a" +
    "\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\044" +
    "\uff9a\045\uff9a\001\002\000\062\003\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\010\uffe0\016\uffe0\017\uffe0\022\uffe0\032\uffe0\033" +
    "\uffe0\043\uffe0\046\uffe0\047\uffe0\050\uffe0\053\uffe0\054\uffe0" +
    "\057\uffe0\060\uffe0\062\uffe0\066\uffe0\074\uffe0\075\uffe0\077" +
    "\uffe0\100\uffe0\001\002\000\052\005\uff9c\007\uff9c\011\uff9c" +
    "\012\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c" +
    "\041\uff9c\042\uff9c\044\uff9c\045\uff9c\001\002\000\004\062" +
    "\302\001\002\000\006\006\316\065\315\001\002\000\004" +
    "\031\304\001\002\000\034\006\062\010\104\016\075\017" +
    "\061\022\107\032\121\033\076\043\073\046\115\047\114" +
    "\062\126\074\056\100\111\001\002\000\042\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\306\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\044" +
    "\uffca\045\uffca\001\002\000\006\032\121\033\076\001\002" +
    "\000\004\011\310\001\002\000\004\004\311\001\002\000" +
    "\062\003\210\004\052\005\313\006\062\010\104\016\075" +
    "\017\061\022\107\032\121\033\076\043\073\046\115\047" +
    "\114\050\120\053\072\054\071\057\077\060\122\062\060" +
    "\066\064\074\056\075\117\077\067\100\111\001\002\000" +
    "\062\003\210\004\052\005\314\006\062\010\104\016\075" +
    "\017\061\022\107\032\121\033\076\043\073\046\115\047" +
    "\114\050\120\053\072\054\071\057\077\060\122\062\060" +
    "\066\064\074\056\075\117\077\067\100\111\001\002\000" +
    "\062\003\uffb5\004\uffb5\005\uffb5\006\uffb5\010\uffb5\016\uffb5" +
    "\017\uffb5\022\uffb5\032\uffb5\033\uffb5\043\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\053\uffb5\054\uffb5\057\uffb5\060\uffb5\062\uffb5" +
    "\066\uffb5\074\uffb5\075\uffb5\077\uffb5\100\uffb5\001\002\000" +
    "\062\003\uffb6\004\uffb6\005\uffb6\006\uffb6\010\uffb6\016\uffb6" +
    "\017\uffb6\022\uffb6\032\uffb6\033\uffb6\043\uffb6\046\uffb6\047" +
    "\uffb6\050\uffb6\053\uffb6\054\uffb6\057\uffb6\060\uffb6\062\uffb6" +
    "\066\uffb6\074\uffb6\075\uffb6\077\uffb6\100\uffb6\001\002\000" +
    "\034\006\062\010\104\016\075\017\061\022\107\032\121" +
    "\033\076\043\073\046\115\047\114\062\126\074\056\100" +
    "\111\001\002\000\034\006\062\010\104\016\075\017\061" +
    "\022\107\032\121\033\076\043\073\046\115\047\114\062" +
    "\126\074\056\100\111\001\002\000\042\007\320\023\133" +
    "\024\140\025\143\026\136\027\151\030\134\034\147\035" +
    "\142\036\141\037\146\040\135\041\144\042\145\044\137" +
    "\045\150\001\002\000\004\065\321\001\002\000\034\006" +
    "\062\010\104\016\075\017\061\022\107\032\121\033\076" +
    "\043\073\046\115\047\114\062\126\074\056\100\111\001" +
    "\002\000\042\023\133\024\140\025\143\026\136\027\151" +
    "\030\134\031\uffd3\034\147\035\142\036\141\037\146\040" +
    "\135\041\144\042\145\044\137\045\150\001\002\000\042" +
    "\023\133\024\140\025\143\026\136\027\151\030\134\031" +
    "\uffd2\034\147\035\142\036\141\037\146\040\135\041\144" +
    "\042\145\044\137\045\150\001\002\000\062\003\210\004" +
    "\052\005\326\006\062\010\104\016\075\017\061\022\107" +
    "\032\121\033\076\043\073\046\115\047\114\050\120\053" +
    "\072\054\071\057\077\060\122\062\060\066\064\074\056" +
    "\075\117\077\067\100\111\001\002\000\062\003\210\004" +
    "\052\005\334\006\062\010\104\016\075\017\061\022\107" +
    "\032\121\033\076\043\073\046\115\047\114\050\120\053" +
    "\072\054\071\057\077\060\122\062\060\066\064\074\056" +
    "\075\117\077\067\100\111\001\002\000\004\055\327\001" +
    "\002\000\004\010\330\001\002\000\034\006\062\010\104" +
    "\016\075\017\061\022\107\032\121\033\076\043\073\046" +
    "\127\047\130\062\126\074\056\100\111\001\002\000\004" +
    "\011\332\001\002\000\004\031\333\001\002\000\062\003" +
    "\uffbc\004\uffbc\005\uffbc\006\uffbc\010\uffbc\016\uffbc\017\uffbc" +
    "\022\uffbc\032\uffbc\033\uffbc\043\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\053\uffbc\054\uffbc\057\uffbc\060\uffbc\062\uffbc\066\uffbc" +
    "\074\uffbc\075\uffbc\077\uffbc\100\uffbc\001\002\000\004\055" +
    "\335\001\002\000\004\010\336\001\002\000\034\006\062" +
    "\010\104\016\075\017\061\022\107\032\121\033\076\043" +
    "\073\046\127\047\130\062\126\074\056\100\111\001\002" +
    "\000\004\011\340\001\002\000\004\031\341\001\002\000" +
    "\062\003\uffbd\004\uffbd\005\uffbd\006\uffbd\010\uffbd\016\uffbd" +
    "\017\uffbd\022\uffbd\032\uffbd\033\uffbd\043\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\053\uffbd\054\uffbd\057\uffbd\060\uffbd\062\uffbd" +
    "\066\uffbd\074\uffbd\075\uffbd\077\uffbd\100\uffbd\001\002\000" +
    "\034\006\062\010\104\016\075\017\061\022\107\032\121" +
    "\033\076\043\073\046\115\047\114\062\126\074\343\100" +
    "\111\001\002\000\044\011\uffeb\012\347\023\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\027\uffeb\030\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\044\uffeb\045\uffeb" +
    "\001\002\000\042\011\345\023\133\024\140\025\143\026" +
    "\136\027\151\030\134\034\147\035\142\036\141\037\146" +
    "\040\135\041\144\042\145\044\137\045\150\001\002\000" +
    "\004\031\346\001\002\000\062\003\uffde\004\uffde\005\uffde" +
    "\006\uffde\010\uffde\016\uffde\017\uffde\022\uffde\032\uffde\033" +
    "\uffde\043\uffde\046\uffde\047\uffde\050\uffde\053\uffde\054\uffde" +
    "\057\uffde\060\uffde\062\uffde\066\uffde\074\uffde\075\uffde\077" +
    "\uffde\100\uffde\001\002\000\034\006\062\010\104\016\075" +
    "\017\061\022\107\032\121\033\076\043\073\046\115\047" +
    "\114\062\126\074\056\100\111\001\002\000\006\011\351" +
    "\012\200\001\002\000\004\031\352\001\002\000\062\003" +
    "\uffdd\004\uffdd\005\uffdd\006\uffdd\010\uffdd\016\uffdd\017\uffdd" +
    "\022\uffdd\032\uffdd\033\uffdd\043\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\053\uffdd\054\uffdd\057\uffdd\060\uffdd\062\uffdd\066\uffdd" +
    "\074\uffdd\075\uffdd\077\uffdd\100\uffdd\001\002\000\042\023" +
    "\133\024\140\025\143\026\136\027\151\030\134\031\354" +
    "\034\147\035\142\036\141\037\146\040\135\041\144\042" +
    "\145\044\137\045\150\001\002\000\062\003\uffdc\004\uffdc" +
    "\005\uffdc\006\uffdc\010\uffdc\016\uffdc\017\uffdc\022\uffdc\032" +
    "\uffdc\033\uffdc\043\uffdc\046\uffdc\047\uffdc\050\uffdc\053\uffdc" +
    "\054\uffdc\057\uffdc\060\uffdc\062\uffdc\066\uffdc\074\uffdc\075" +
    "\uffdc\077\uffdc\100\uffdc\001\002\000\062\003\uffe2\004\uffe2" +
    "\005\uffe2\006\uffe2\010\uffe2\016\uffe2\017\uffe2\022\uffe2\032" +
    "\uffe2\033\uffe2\043\uffe2\046\uffe2\047\uffe2\050\uffe2\053\uffe2" +
    "\054\uffe2\057\uffe2\060\uffe2\062\uffe2\066\uffe2\074\uffe2\075" +
    "\uffe2\077\uffe2\100\uffe2\001\002\000\006\007\357\012\200" +
    "\001\002\000\052\005\uffc3\007\uffc3\011\uffc3\012\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\044\uffc3\045\uffc3\001\002\000\004\031\365\001\002" +
    "\000\036\004\260\006\062\010\104\016\075\017\061\022" +
    "\107\032\121\033\076\043\073\046\115\047\114\062\126" +
    "\074\056\100\111\001\002\000\034\006\062\010\104\016" +
    "\075\017\061\022\107\032\121\033\076\043\073\046\115" +
    "\047\114\062\126\074\056\100\111\001\002\000\042\007" +
    "\364\023\133\024\140\025\143\026\136\027\151\030\134" +
    "\034\147\035\142\036\141\037\146\040\135\041\144\042" +
    "\145\044\137\045\150\001\002\000\044\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5" +
    "\045\uffc5\065\321\001\002\000\062\003\uffdf\004\uffdf\005" +
    "\uffdf\006\uffdf\010\uffdf\016\uffdf\017\uffdf\022\uffdf\032\uffdf" +
    "\033\uffdf\043\uffdf\046\uffdf\047\uffdf\050\uffdf\053\uffdf\054" +
    "\uffdf\057\uffdf\060\uffdf\062\uffdf\066\uffdf\074\uffdf\075\uffdf" +
    "\077\uffdf\100\uffdf\001\002\000\066\002\uffe7\003\uffe7\004" +
    "\uffe7\005\uffe7\006\uffe7\010\uffe7\016\uffe7\017\uffe7\022\uffe7" +
    "\032\uffe7\033\uffe7\043\uffe7\046\uffe7\047\uffe7\050\uffe7\053" +
    "\uffe7\054\uffe7\057\uffe7\060\uffe7\062\uffe7\066\uffe7\070\uffe7" +
    "\074\uffe7\075\uffe7\077\uffe7\100\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\006\044\004\045\003\001\001\000\006\004" +
    "\007\046\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\011\006\013\007\010\001\001\000\002\001" +
    "\001\000\004\010\052\001\001\000\006\006\050\007\010" +
    "\001\001\000\004\002\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\025\001\001\000\010" +
    "\002\027\011\031\012\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\027\012\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\044\001\001\000\010\002\027\011\046\012\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\067\010\115\015\054" +
    "\016\100\017\105\020\062\022\073\023\122\024\056\025" +
    "\102\026\064\027\077\031\104\032\112\033\111\035\053" +
    "\036\107\037\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\003\067\010\115\016\212\017\105\020\062" +
    "\022\073\023\122\024\056\025\102\026\064\027\077\031" +
    "\104\032\112\033\111\035\053\036\107\037\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\357\001" +
    "\001\000\002\001\001\000\026\003\067\013\355\014\175" +
    "\022\174\023\122\024\056\025\102\026\064\027\077\031" +
    "\104\001\001\000\002\001\001\000\022\003\067\022\352" +
    "\023\122\024\056\025\102\026\064\027\077\031\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\067\022\277\023\122\024\056\025\102\026\064" +
    "\027\077\031\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\067\013\271\014\175\022\174\023\122\024\056" +
    "\025\102\026\064\027\077\031\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\067\022\131" +
    "\023\122\024\130\025\102\026\064\027\077\031\104\034" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\067\022\167\023\122\024\056\025\102" +
    "\026\064\027\077\031\104\001\001\000\022\003\067\022" +
    "\166\023\122\024\056\025\102\026\064\027\077\031\104" +
    "\001\001\000\022\003\067\022\165\023\122\024\056\025" +
    "\102\026\064\027\077\031\104\001\001\000\022\003\067" +
    "\022\164\023\122\024\056\025\102\026\064\027\077\031" +
    "\104\001\001\000\022\003\067\022\163\023\122\024\056" +
    "\025\102\026\064\027\077\031\104\001\001\000\022\003" +
    "\067\022\162\023\122\024\056\025\102\026\064\027\077" +
    "\031\104\001\001\000\022\003\067\022\161\023\122\024" +
    "\056\025\102\026\064\027\077\031\104\001\001\000\022" +
    "\003\067\022\160\023\122\024\056\025\102\026\064\027" +
    "\077\031\104\001\001\000\022\003\067\022\157\023\122" +
    "\024\056\025\102\026\064\027\077\031\104\001\001\000" +
    "\022\003\067\022\156\023\122\024\056\025\102\026\064" +
    "\027\077\031\104\001\001\000\022\003\067\022\155\023" +
    "\122\024\056\025\102\026\064\027\077\031\104\001\001" +
    "\000\022\003\067\022\154\023\122\024\056\025\102\026" +
    "\064\027\077\031\104\001\001\000\022\003\067\022\153" +
    "\023\122\024\056\025\102\026\064\027\077\031\104\001" +
    "\001\000\022\003\067\022\152\023\122\024\056\025\102" +
    "\026\064\027\077\031\104\001\001\000\022\003\067\022" +
    "\151\023\122\024\056\025\102\026\064\027\077\031\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\067\022\201\023\122\024\056\025\102\026\064\027\077" +
    "\031\104\001\001\000\026\003\067\013\173\014\175\022" +
    "\174\023\122\024\056\025\102\026\064\027\077\031\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\067" +
    "\014\200\022\174\023\122\024\056\025\102\026\064\027" +
    "\077\031\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\067\010" +
    "\115\015\205\016\100\017\105\020\062\022\073\023\122" +
    "\024\056\025\102\026\064\027\077\031\104\032\112\033" +
    "\111\035\053\036\107\037\065\001\001\000\044\003\067" +
    "\010\115\016\212\017\105\020\062\022\073\023\122\024" +
    "\056\025\102\026\064\027\077\031\104\032\112\033\111" +
    "\035\053\036\107\037\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\067\022\131\023" +
    "\122\024\130\025\102\026\064\027\077\031\104\034\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\067\010\115\015\220\016\100\017\105\020\062\022\073" +
    "\023\122\024\056\025\102\026\064\027\077\031\104\032" +
    "\112\033\111\035\053\036\107\037\065\001\001\000\044" +
    "\003\067\010\115\016\212\017\105\020\062\022\073\023" +
    "\122\024\056\025\102\026\064\027\077\031\104\032\112" +
    "\033\111\035\053\036\107\037\065\001\001\000\012\040" +
    "\226\041\225\042\224\043\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\231\001" +
    "\001\000\002\001\001\000\006\041\230\042\224\001\001" +
    "\000\004\042\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\067\010\115\015\234\016\100\017\105" +
    "\020\062\022\073\023\122\024\056\025\102\026\064\027" +
    "\077\031\104\032\112\033\111\035\053\036\107\037\065" +
    "\001\001\000\044\003\067\010\115\016\212\017\105\020" +
    "\062\022\073\023\122\024\056\025\102\026\064\027\077" +
    "\031\104\032\112\033\111\035\053\036\107\037\065\001" +
    "\001\000\002\001\001\000\024\003\067\022\131\023\122" +
    "\024\130\025\102\026\064\027\077\031\104\034\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\067" +
    "\010\115\015\242\016\100\017\105\020\062\022\073\023" +
    "\122\024\056\025\102\026\064\027\077\031\104\032\112" +
    "\033\111\035\053\036\107\037\065\001\001\000\044\003" +
    "\067\010\115\016\212\017\105\020\062\022\073\023\122" +
    "\024\056\025\102\026\064\027\077\031\104\032\112\033" +
    "\111\035\053\036\107\037\065\001\001\000\002\001\001" +
    "\000\046\003\067\010\115\015\245\016\100\017\105\020" +
    "\062\022\073\023\122\024\056\025\102\026\064\027\077" +
    "\031\104\032\112\033\111\035\053\036\107\037\065\001" +
    "\001\000\044\003\067\010\115\016\212\017\105\020\062" +
    "\022\073\023\122\024\056\025\102\026\064\027\077\031" +
    "\104\032\112\033\111\035\053\036\107\037\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\067\022\263\023\122\024\056\025\102\026\064" +
    "\027\077\031\104\001\001\000\022\003\067\022\253\023" +
    "\122\024\056\025\102\026\064\027\077\031\104\001\001" +
    "\000\002\001\001\000\004\021\256\001\001\000\022\003" +
    "\067\022\260\023\122\024\056\025\102\026\064\027\077" +
    "\031\104\001\001\000\002\001\001\000\026\003\067\013" +
    "\261\014\175\022\174\023\122\024\056\025\102\026\064" +
    "\027\077\031\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\067" +
    "\013\266\014\175\022\174\023\122\024\056\025\102\026" +
    "\064\027\077\031\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\067\022\131\023\122\024\304\025\102\026" +
    "\064\027\077\031\104\001\001\000\002\001\001\000\004" +
    "\026\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\067\010\115\015\311\016\100\017\105\020\062" +
    "\022\073\023\122\024\056\025\102\026\064\027\077\031" +
    "\104\032\112\033\111\035\053\036\107\037\065\001\001" +
    "\000\044\003\067\010\115\016\212\017\105\020\062\022" +
    "\073\023\122\024\056\025\102\026\064\027\077\031\104" +
    "\032\112\033\111\035\053\036\107\037\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\067\022\322" +
    "\023\122\024\056\025\102\026\064\027\077\031\104\001" +
    "\001\000\022\003\067\022\316\023\122\024\056\025\102" +
    "\026\064\027\077\031\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\067\022\321\023\122\024\056" +
    "\025\102\026\064\027\077\031\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\067\010\115\015\324" +
    "\016\100\017\105\020\062\022\073\023\122\024\056\025" +
    "\102\026\064\027\077\031\104\032\112\033\111\035\053" +
    "\036\107\037\065\001\001\000\044\003\067\010\115\016" +
    "\212\017\105\020\062\022\073\023\122\024\056\025\102" +
    "\026\064\027\077\031\104\032\112\033\111\035\053\036" +
    "\107\037\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\067\022\131\023\122\024\130\025\102\026" +
    "\064\027\077\031\104\034\330\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\067\022\131\023\122\024\130" +
    "\025\102\026\064\027\077\031\104\034\336\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\067\022\343\023\122\024\056\025\102\026\064\027" +
    "\077\031\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\067\013" +
    "\347\014\175\022\174\023\122\024\056\025\102\026\064" +
    "\027\077\031\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\067\022\322\023\122\024\056" +
    "\025\102\026\064\027\077\031\104\001\001\000\022\003" +
    "\067\022\362\023\122\024\056\025\102\026\064\027\077" +
    "\031\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    // Connect this parser to a scanner!
    Lexer lex;
    boolean syntaxError;
    ArrayList<String> errores = new ArrayList<String>();
    String errorActual = "";
    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
        this.syntaxError = false; // Inicializar el booleano de errores
    }


    /*Funcion syntax_error sobreescrita para el manejo de errores en idioma espaniol 
    Recibe de parametro el symbol del token actual en el que se ha encontrado un error
    No retorna nada 
    */
    public void syntax_error(Symbol errorSymbol) {//Se imprime la linea y columna del error
        errorActual = "Error sintactico en la linea: " + errorSymbol.left + ", y columna " + errorSymbol.right;
        //System.err.println("Error sintactico en la linea: " + errorSymbol.left + ", y columna " + errorSymbol.right );
        this.errores.add(errorActual);
        this.syntaxError = true; //El booleano se pone en true para indicar que se encontro un error 
    }

    public void semantic_error(String pTipo, String pExpresion){
        switch(pTipo){
          case "local":
              //System.out.println("Error semantico local en la linea " + (lex.getLine()+1) + " columna " + lex.getColumn() + ": " + "Debido al dato ya existente: " + pExpresion);
              errorActual = "Error semantico local en la linea " + (lex.getLine()+1) + " columna " + lex.getColumn() + ": " + "Debido a la variable ya existente: " + pExpresion;
              this.errores.add(errorActual);
              this.syntaxError = true;
              break;
          case "param":
              //System.out.println("Error semantico local en la linea " + (lex.getLine()+1) + " columna " + lex.getColumn() + ": " + "Debido al dato ya existente: " + pExpresion);
              errorActual = "Error semantico local en la linea " + (lex.getLine()+1) + " columna " + lex.getColumn() + ": " + "Debido al parametro repetido: " + pExpresion;
              this.errores.add(errorActual);
              this.syntaxError = true;
              break;
          case "fun":
              //System.out.println("Error semantico local en la linea " + (lex.getLine()+1) + " columna " + lex.getColumn() + ": " + "Debido al dato ya existente: " + pExpresion);
              errorActual = "Error semantico local en la linea " + (lex.getLine()+1) + " columna " + lex.getColumn() + ": " + "Debido a la funcion ya existente: " + pExpresion;
              this.errores.add(errorActual);
              this.syntaxError = true;
              break;

//variable no existente: var
//mal retorno: return
//mala asignacion: assign
//
          
        }
    }
    // Metodo que verifica si hubo un error sintactico, el cual no recibe ni retorna valores 
    public boolean huboError() {
        return syntaxError;
    }

    //Metodo que imprime si hubo error sintactico y si la gramatica puede ser generada 
    public void estadoGramatica() {
        if (huboError()) {
            System.out.println("El archivo fuente no puede ser generado por la gramatica, debido a errores encontrados en estas partes del archivo:\n");
            for(String currentError : errores){
                System.out.println("\t " + currentError);            
            }

        } else {
            System.out.println("El archivo fuente si puede ser generado por la gramatica");
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    //Funcion que sirve para imprimir la tabla de simbolos
    //No tiene params de entrada ni de salida
//    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<String, ArrayList<String>>();
    LinkedHashMap<String, ArrayList<String>> listaTablasSimbolos = new LinkedHashMap<String, ArrayList<String>>();

    String currHash = "";
    String globalHash = "globalTS";

    /*Funcion para imprimir en consola la tabla de simbolos generada en el parse
    */
    public void imprimirTablaSimbolos(){
        for(String key: listaTablasSimbolos.keySet()) {
            System.out.println("\nTabla de simbolo: " + key);
            System.out.println("Valores : ");
            for(String item : listaTablasSimbolos.get(key)){
                System.out.print(item);
            }
            System.out.println("");
        }
    }

public void escribirTablaSimbolos() {
    String filePath = "C:\\Users\\Usuario\\Documents\\NetBeansProjects\\ProyectoCompi2\\src\\proyectocompi2\\outputParser.txt";;
    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
        for (String key : listaTablasSimbolos.keySet()) {
            writer.write("\nTabla de simbolo: " + key + "\n");
            writer.write("Valores : \n");
            for (String item : listaTablasSimbolos.get(key)) {
                writer.write(item);
            }
            writer.write("\n");
        }
    } catch (IOException e) {
        System.err.println("Error escribiendo al archivo: " + e.getMessage());
    }
}

    /*Funcion que recibe la tabla de simbolos y el id como hilera para retornar el tipo
    */
    public String getTipo(ArrayList<String> tablasSimbolos, String id){
        String tipo = "null";
        for (String token : tablasSimbolos){
            String[] partesToken = token.split(":");
            if(id.equals(partesToken[0])){
                tipo = partesToken[1];
            }
        }
    }

    public void hola(){
        System.out.println("Hola");
    }

    public void adios(){
        System.out.println("Adios");
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

//        listaTablasSimbolos.put(globalHash, new ArrayList<String>());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // navidad ::= NT$0 bolsaNavidena 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
//        hola();
//        adios();
    imprimirTablaSimbolos();
    escribirTablaSimbolos();
    System.out.println("Fin del parseo...\n");
  
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;

    System.out.println("\nInicio del parseo...");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bolsaNavidena ::= NT$1 bolsaNavidenaAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsaNavidena",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bolsaNavidenaAux ::= defBolsaNavidena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsaNavidenaAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bolsaNavidenaAux ::= bolsaNavidenaAux defBolsaNavidena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsaNavidenaAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // defBolsaNavidena ::= bolsasNavidenas codigoBolsaNavidena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defBolsaNavidena",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bolsasNavidenas ::= FESTIVAL t_int_sinterklass ARBOL ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		//Se ingresan al hash la info de la funcion declarada y se inicializa una nueva tabla de simbolos

                        if (listaTablasSimbolos.containsKey("main")) {
                            //listaTablasSimbolos.get(currHash).add(tipoEntrada);
                            semantic_error("fun", "main");
                        } 
                        else{
                            String tipoTabla = " Tipo Dato: ";
                            tipoTabla =  tipoTabla + "int;\n";
                            ArrayList<String> funMain = new ArrayList<String>();
                            currHash = "main";
                            String nombreDato = " Nombre: ";
                            nombreDato = nombreDato + "main" + ";";
                            String tipoEntrada = "Tipo Entrada: ";
                            tipoEntrada = tipoEntrada + "Funcion;";
                            funMain.add(tipoEntrada);
                            funMain.add(nombreDato);
                            funMain.add(tipoTabla); 
                            listaTablasSimbolos.put(currHash, funMain); 
                        }                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsasNavidenas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bolsasNavidenas ::= FESTIVAL tsantaclaus PERSONA ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 //Se ingresan al hash la info de la funcion declarada y se inicializa una nueva tabla de simbolos

/*
                        if (listaTablasSimbolos.containsKey(per.toString())) {
                            //listaTablasSimbolos.get(currHash).add(tipoEntrada);
                            semantic_error("fun", per.toString());
                        } 
                        else{
                        }
*/
                        if (listaTablasSimbolos.containsKey(per.toString())) {
                            //listaTablasSimbolos.get(currHash).add(tipoEntrada);
                            semantic_error("fun", per.toString());
                        } 
                        else{
                            currHash = per.toString();
                            String tipoDato = " Tipo Dato: ";
                            tipoDato =  tipoDato + t.toString()  + ".\n";
                            String nombreDato = " Nombre: ";
                            nombreDato = nombreDato + per.toString() + ",";
                            String tipoEntrada = "Tipo Entrada: ";
                            tipoEntrada = tipoEntrada + "Funcion" + ",";
                            tipoEntrada = tipoEntrada + nombreDato + tipoDato;
                            ArrayList<String> fun = new ArrayList<String>();
                            fun.add(tipoEntrada);
                            //listaTablasSimbolos.get(currHash).add(tipoEntrada); 
                            listaTablasSimbolos.put(currHash, fun);
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsasNavidenas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bolsasNavidenas ::= FESTIVAL SINREGALO PERSONA ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 //Se ingresan al hash la info de la funcion declarada y se inicializa una nueva tabla de simbolos
                        if (listaTablasSimbolos.containsKey(per.toString())) {
                            //listaTablasSimbolos.get(currHash).add(tipoEntrada);
                            semantic_error("fun", per.toString());
                        } 
                        else{
                            currHash = per.toString();
                            String tipoDato = " Tipo Dato: ";
                            tipoDato =  tipoDato + "void"  + ".\n";
                            String nombreDato = " Nombre: ";
                            nombreDato = nombreDato + per.toString() + ",";
                            String tipoEntrada = "Tipo Entrada: ";
                            tipoEntrada = tipoEntrada + "Funcion" + ",";
                            tipoEntrada = tipoEntrada + nombreDato + tipoDato;
                            ArrayList<String> fun = new ArrayList<String>();
                            fun.add(tipoEntrada);
                            //listaTablasSimbolos.get(currHash).add(tipoEntrada); 
                            listaTablasSimbolos.put(currHash, fun);
                        }


                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsasNavidenas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 //Se ingresan al hash la info de la funcion declarada y se inicializa una nueva tabla de simbolos
                        if (listaTablasSimbolos.containsKey(per.toString())) {
                            //listaTablasSimbolos.get(currHash).add(tipoEntrada);
                            semantic_error("fun", per.toString());
                        } 
                        else{
                            currHash = per.toString();
                            String tipoDato = " Tipo Dato: ";
                            tipoDato =  tipoDato + t.toString()  + ".\n";
                            String nombreDato = " Nombre: ";
                            nombreDato = nombreDato + per.toString() + ",";
                            String tipoEntrada = "Tipo Entrada: ";
                            tipoEntrada = tipoEntrada + "Funcion" + ",";
                            tipoEntrada = tipoEntrada + nombreDato + tipoDato;
                            ArrayList<String> fun = new ArrayList<String>();
                            fun.add(tipoEntrada);
                            //listaTablasSimbolos.get(currHash).add(tipoEntrada); 
                            listaTablasSimbolos.put(currHash, fun);
                        }

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bolsasNavidenas ::= FESTIVAL tsantaclaus PERSONA ABRECUENTO NT$2 paramBastoncitos CIERRACUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsasNavidenas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$3 ::= 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  
                        if (listaTablasSimbolos.containsKey(per.toString())) {
                            //listaTablasSimbolos.get(currHash).add(tipoEntrada);
                            semantic_error("fun", per.toString());
                        } 
                        else{
                            currHash = per.toString();
                            String tipoDato = " Tipo Dato: ";
                            tipoDato =  tipoDato + "void"  + ".\n";
                            String nombreDato = " Nombre: ";
                            nombreDato = nombreDato + per.toString() + ",";
                            String tipoEntrada = "Tipo Entrada: ";
                            tipoEntrada = tipoEntrada + "Funcion" + ",";
                            tipoEntrada = tipoEntrada + nombreDato + tipoDato;
                            ArrayList<String> fun = new ArrayList<String>();
                            fun.add(tipoEntrada);
                            listaTablasSimbolos.put(currHash, fun);
                        }                     

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bolsasNavidenas ::= FESTIVAL SINREGALO PERSONA ABRECUENTO NT$3 paramBastoncitos CIERRACUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsasNavidenas",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tsantaclaus ::= t_int_sinterklass 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tsantaclaus ::= t_float_santa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tsantaclaus ::= t_string_nicolas 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tsantaclaus ::= t_bool_colacho 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tsantaclaus ::= t_char_dedmoroz 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tlsantaclaus ::= l_int_dedmoroz 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dato(l, TipoDato.INT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tlsantaclaus ::= l_float_padrenavidad 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dato(l, TipoDato.FLOAT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tlsantaclaus ::= l_string_nicolas 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dato(l, TipoDato.STRING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tlsantaclaus ::= l_MINIREGALO 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dato(l, TipoDato.CHAR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tlsantaclaus ::= l_tPAPANOEL 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dato(l, TipoDato.BOOLEAN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tlsantaclaus ::= l_fPAPANOEL 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Dato(l, TipoDato.BOOLEAN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // codigoBolsaNavidena ::= ABREREGALO lineasDeNavidad CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigoBolsaNavidena",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // codigoBolsaNavidena ::= ABREREGALO error CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigoBolsaNavidena",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lineasDeNavidad ::= auxLineasDeNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineasDeNavidad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lineasDeNavidad ::= lineasDeNavidad auxLineasDeNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineasDeNavidad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // auxLineasDeNavidad ::= creaRegalo FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxLineasDeNavidad",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // auxLineasDeNavidad ::= asignaRegalo FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxLineasDeNavidad",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // auxLineasDeNavidad ::= pesebre 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxLineasDeNavidad",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // auxLineasDeNavidad ::= exprRegalo FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxLineasDeNavidad",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // auxLineasDeNavidad ::= PERSONA asignaMultiplesRegalos FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxLineasDeNavidad",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // auxLineasDeNavidad ::= NARRA ABRECUENTO exprRegalo CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxLineasDeNavidad",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // auxLineasDeNavidad ::= NARRA ABRECUENTO l_string_nicolas SEPARAREGALO expresionesBastoncitos CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxLineasDeNavidad",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // auxLineasDeNavidad ::= RETORNAREGALO exprRegalo FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxLineasDeNavidad",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // auxLineasDeNavidad ::= codigoBolsaNavidena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxLineasDeNavidad",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // auxLineasDeNavidad ::= CORTA FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxLineasDeNavidad",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // auxLineasDeNavidad ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("auxLineasDeNavidad",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // creaRegalo ::= NATIVIDAD tsantaclaus PERSONA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//Se ingresan a la tabla la info del simbolo declarado
                

                    String tipoDato = " Tipo Dato: ";
                    tipoDato =  tipoDato + t.toString()  + ".\n";
                    String nombreDato = " Nombre: ";
                    nombreDato = nombreDato + per.toString() + ",";
                    String tipoEntrada = "Tipo Entrada: ";
                    tipoEntrada = tipoEntrada + "Local" + ",";
                    tipoEntrada = tipoEntrada + nombreDato + tipoDato;
                    List<String> entries = listaTablasSimbolos.get(currHash);
                    Boolean elementoExiste = false;
                    if (entries != null) {
                        for (String entry : entries) {
                            if (entry.contains(nombreDato)) {
                                elementoExiste = true;
                                //listaTablasSimbolos.get(currHash).add(tipoEntrada);
                                //System.out.println("\nVARIABLE HA SIDO DECLARADA");
                                
                            }
                        }
                    }
                    
                    if(elementoExiste == false){
                        listaTablasSimbolos.get(currHash).add(tipoEntrada);
                        //System.out.println("\nVARIABLE NO HA SIDO DECLARADA");                        
                    }
                    else{
                        semantic_error("local", per.toString());
                    }

                        
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // creaRegalo ::= NATIVIDAD tsantaclaus PERSONA ENTREGA exprRegalo 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		//Se ingresan a la tabla la info del simbolo declarado
 
                    String tipoDato = " Tipo Dato: ";
                    tipoDato =  tipoDato + t.toString()  + ".\n";
                    String nombreDato = " Nombre: ";
                    nombreDato = nombreDato + per.toString() + ",";
                    String tipoEntrada = "Tipo Entrada: ";
                    tipoEntrada = tipoEntrada + "Local" + ",";
                    tipoEntrada = tipoEntrada + nombreDato + tipoDato;
                    List<String> entries = listaTablasSimbolos.get(currHash);
                    Boolean elementoExiste = false;
                    if (entries != null) {
                        for (String entry : entries) {
                            if (entry.contains(nombreDato)) {
                                elementoExiste = true;
                                //listaTablasSimbolos.get(currHash).add(tipoEntrada);
                                System.out.println("\nVARIABLE HA SIDO DECLARADA");
                                
                            }
                        }
                    }
                    
                    if(elementoExiste == false){
                        listaTablasSimbolos.get(currHash).add(tipoEntrada);
                        //System.out.println("\nVARIABLE NO HA SIDO DECLARADA");                        
                    }
                    //listaTablasSimbolos.get(currHash).add(tipoEntrada); 
                    else{
                        semantic_error("local", per.toString());
                    }
                        
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // creaRegalo ::= NATIVIDAD tsantaclaus PERSONA ABREEMPAQUE exprRegalo CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		//Se ingresan a la tabla la info del simbolo declarado
 
                    String tipoDato = " Tipo Dato: ";
                    tipoDato =  tipoDato +  t.toString() + "[ ] .\n";
                    String nombreDato = " Nombre: ";
                    nombreDato = nombreDato + per.toString() + ",";
                    String tipoEntrada = "Tipo Entrada: ";
                    tipoEntrada = tipoEntrada + "Local" + ",";
                    tipoEntrada = tipoEntrada + nombreDato + tipoDato;
                    //listaTablasSimbolos.get(currHash).add(tipoEntrada);
                    List<String> entries = listaTablasSimbolos.get(currHash);
                    Boolean elementoExiste = false;
                    if (entries != null) {
                        for (String entry : entries) {
                            if (entry.contains(nombreDato)) {
                                elementoExiste = true;
                                //listaTablasSimbolos.get(currHash).add(tipoEntrada);
                                //System.out.println("\nVARIABLE HA SIDO DECLARADA");
                                
                            }
                        }
                    }
                    
                    if(elementoExiste == false){
                        listaTablasSimbolos.get(currHash).add(tipoEntrada);
                        //System.out.println("\nVARIABLE NO HA SIDO DECLARADA");                        
                    }
                    else{
                        semantic_error("local", per.toString());
                    } 
                        
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // creaRegalo ::= NATIVIDAD tsantaclaus PERSONA ABREEMPAQUE exprRegalo CIERRAEMPAQUE ENTREGA exprRegalo 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		//Se ingresan a la tabla la info del simbolo declarado
 
                    String tipoDato = " Tipo Dato: ";
                    tipoDato =  tipoDato +  t.toString() + "[ ] .\n";
                    String nombreDato = " Nombre: ";
                    nombreDato = nombreDato + per.toString() + ",";
                    String tipoEntrada = "Tipo Entrada: ";
                    tipoEntrada = tipoEntrada + "Local" + ",";
                    tipoEntrada = tipoEntrada + nombreDato + tipoDato;
                    //listaTablasSimbolos.get(currHash).add(tipoEntrada); 
                    List<String> entries = listaTablasSimbolos.get(currHash);
                    Boolean elementoExiste = false;
                    if (entries != null) {
                        for (String entry : entries) {
                            if (entry.contains(nombreDato)) {
                                elementoExiste = true;
                                //listaTablasSimbolos.get(currHash).add(tipoEntrada);
                                //System.out.println("\nVARIABLE HA SIDO DECLARADA");
                                
                            }
                        }
                    }
                    
                    if(elementoExiste == false){
                        listaTablasSimbolos.get(currHash).add(tipoEntrada);
                        //System.out.println("\nVARIABLE NO HA SIDO DECLARADA");                        
                    }
                    else{
                        semantic_error("local", per.toString());
                    }                         
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // creaRegalo ::= NATIVIDAD tsantaclaus PERSONA ABREEMPAQUE exprRegalo CIERRAEMPAQUE asignaMultiplesRegalos 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		//Se ingresan a la tabla la info del simbolo declarado
 
                    String tipoDato = " Tipo Dato: ";
                    tipoDato =  tipoDato +  t.toString() + "[ ].\n";
                    String nombreDato = " Nombre: ";
                    nombreDato = nombreDato + per.toString() + ",";
                    String tipoEntrada = "Tipo Entrada: ";
                    tipoEntrada = tipoEntrada + "Local" + ",";
                    tipoEntrada = tipoEntrada + nombreDato + tipoDato;
                    //listaTablasSimbolos.get(currHash).add(tipoEntrada); 
                    List<String> entries = listaTablasSimbolos.get(currHash);
                    Boolean elementoExiste = false;
                    if (entries != null) {
                        for (String entry : entries) {
                            if (entry.contains(nombreDato)) {
                                elementoExiste = true;
                                //listaTablasSimbolos.get(currHash).add(tipoEntrada);
                                //System.out.println("\nVARIABLE HA SIDO DECLARADA");
                                
                            }
                        }
                    }
                    
                    if(elementoExiste == false){
                        listaTablasSimbolos.get(currHash).add(tipoEntrada);
                        //System.out.println("\nVARIABLE NO HA SIDO DECLARADA");                        
                    }
                    else{
                        semantic_error("local", per.toString());
                    } 
                        
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // asignaRegalo ::= PERSONA ABREEMPAQUE exprRegalo CIERRAEMPAQUE ENTREGA exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaRegalo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // asignaRegalo ::= PERSONA ENTREGA exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaRegalo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // asignaMultiplesRegalos ::= ENTREGA ABREREGALO expresionesBastoncitos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaMultiplesRegalos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // pedirBolsaNavidena ::= PERSONA ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pedirBolsaNavidena",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // pedirBolsaNavidena ::= PERSONA ABRECUENTO expresionesBastoncitos CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pedirBolsaNavidena",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // pedirBolsaNavidena ::= readBolsaNavidena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pedirBolsaNavidena",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // readBolsaNavidena ::= ESCUCHA ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readBolsaNavidena",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // readBolsaNavidena ::= ESCUCHA ABRECUENTO expresionesBastoncitos CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readBolsaNavidena",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exprRegalo ::= tlsantaclaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRegalo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exprRegalo ::= regalocompradoRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRegalo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exprRegalo ::= regaloManual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRegalo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exprRegalo ::= regaloprinBinario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRegalo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exprRegalo ::= regaloprinUnario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRegalo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exprRegalo ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRegalo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exprRegalo ::= PERSONA ABREEMPAQUE exprRegalo CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRegalo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exprRegalo ::= ABRECUENTO expresionesBastoncitos CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRegalo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exprRegalo ::= ABREEMPAQUE expresionesBastoncitos CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRegalo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exprRegalo ::= pedirBolsaNavidena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRegalo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // pesebre ::= while_esperarasanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pesebre",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // pesebre ::= for_envuelve 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pesebre",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // pesebre ::= do_hace 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pesebre",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // pesebre ::= if_elfo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pesebre",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // do_hace ::= HACE ABREREGALO lineasDeNavidad CIERRAREGALO REVISA ABRECUENTO condicion_esperarasanta CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_hace",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // do_hace ::= HACE ABREREGALO CIERRAREGALO REVISA ABRECUENTO condicion_esperarasanta CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_hace",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // while_esperarasanta ::= ESPERARASANTA ABRECUENTO condicion_esperarasanta CIERRACUENTO ABREREGALO lineasDeNavidad CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_esperarasanta",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // while_esperarasanta ::= ESPERARASANTA ABRECUENTO condicion_esperarasanta CIERRACUENTO ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_esperarasanta",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condicion_esperarasanta ::= l_tPAPANOEL 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_esperarasanta",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condicion_esperarasanta ::= l_fPAPANOEL 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_esperarasanta",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condicion_esperarasanta ::= regalocompradoRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_esperarasanta",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // for_envuelve ::= ENVUELVE ABRECUENTO asignaRegalo FINREGALO regalocompradoRelacional FINREGALO regaloprinUnario CIERRACUENTO ABREREGALO lineasDeNavidad CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_envuelve",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // for_envuelve ::= ENVUELVE ABRECUENTO asignaRegalo FINREGALO regalocompradoRelacional FINREGALO regaloprinUnario CIERRACUENTO ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_envuelve",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // if_elfo ::= ELFO ABRECUENTO condicion_esperarasanta CIERRACUENTO ABREREGALO lineasDeNavidad CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_elfo",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // if_elfo ::= ELFO ABRECUENTO condicion_esperarasanta CIERRACUENTO ABREREGALO lineasDeNavidad CIERRAREGALO DUENDE ABREREGALO lineasDeNavidad CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_elfo",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // if_elfo ::= ELFO ABRECUENTO condicion_esperarasanta CIERRACUENTO ABREREGALO lineasDeNavidad CIERRAREGALO elif_hada_duende 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_elfo",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // if_elfo ::= ELFO ABRECUENTO condicion_esperarasanta CIERRACUENTO ABREREGALO lineasDeNavidad CIERRAREGALO elif_hada_duende DUENDE ABREREGALO lineasDeNavidad CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_elfo",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // elif_hada_duende ::= elif_hada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_hada_duende",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // elif_hada_duende ::= else_duende elif_hada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_hada_duende",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // elif_hada ::= def_elif_hada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_hada",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // elif_hada ::= elif_hada def_elif_hada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_hada",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // def_elif_hada ::= HADA ABRECUENTO condicion_esperarasanta CIERRACUENTO ABREREGALO lineasDeNavidad CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_elif_hada",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // else_duende ::= DUENDE ABREREGALO lineasDeNavidad CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_duende",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // regalocompradoRelacional ::= exprRegalo g_merryberry exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalocompradoRelacional",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // regalocompradoRelacional ::= exprRegalo l_slinky exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalocompradoRelacional",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // regalocompradoRelacional ::= exprRegalo e_jinglebell exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalocompradoRelacional",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // regalocompradoRelacional ::= exprRegalo ne_tinseltoes exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalocompradoRelacional",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // regalocompradoRelacional ::= exprRegalo ge_snowflake exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalocompradoRelacional",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // regalocompradoRelacional ::= exprRegalo le_candycane exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalocompradoRelacional",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresionesBastoncitos ::= defExprBastoncito 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBastoncitos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresionesBastoncitos ::= expresionesBastoncitos SEPARAREGALO defExprBastoncito 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBastoncitos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // defExprBastoncito ::= exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defExprBastoncito",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // paramBastoncitos ::= defParamBastoncito 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramBastoncitos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // paramBastoncitos ::= paramBastoncitos SEPARAREGALO defParamBastoncito 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramBastoncitos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // defParamBastoncito ::= tsantaclaus PERSONA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
 
                    String tipoDato = " Tipo Dato: ";
                    tipoDato =  tipoDato + t.toString()  + ".\n";
                    String nombreDato = " Nombre: ";
                    nombreDato = nombreDato + per.toString() + ",";
                    String tipoEntrada = "Tipo Entrada: ";
                    tipoEntrada = tipoEntrada + "Parametro" + ",";
                    tipoEntrada = tipoEntrada + nombreDato + tipoDato;
  

                    List<String> entries = listaTablasSimbolos.get(currHash);
                    Boolean elementoExiste = false;
                    if (entries != null) {
                        for (String entry : entries) {
                            if (entry.contains(nombreDato)) {
                                elementoExiste = true;
                                //listaTablasSimbolos.get(currHash).add(tipoEntrada);
                                System.out.println("\nVARIABLE HA SIDO DECLARADA");
                                
                            }
                        }
                    }
                    
                    if(elementoExiste == false){
                        listaTablasSimbolos.get(currHash).add(tipoEntrada);
                        //System.out.println("\nVARIABLE NO HA SIDO DECLARADA");                        
                    }   
                    else{
                        semantic_error("param", per.toString());
                    }                     
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defParamBastoncito",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // regaloManual ::= exprRegalo and_melchior exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloManual",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // regaloManual ::= exprRegalo or_balthassar exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloManual",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // regaloManual ::= not_gaspar exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloManual",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // regaloprinUnario ::= QUIEN PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprinUnario",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // regaloprinUnario ::= GRINCH PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprinUnario",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // regaloprinBinario ::= exprRegalo sum_dasher exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprinBinario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // regaloprinBinario ::= exprRegalo res_dancer exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprinBinario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // regaloprinBinario ::= exprRegalo mul_prancer exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprinBinario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // regaloprinBinario ::= exprRegalo div_int_vixen exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprinBinario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // regaloprinBinario ::= exprRegalo div_float_blitzen exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprinBinario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // regaloprinBinario ::= exprRegalo mod_comet exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprinBinario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // regaloprinBinario ::= exprRegalo pow_cupid exprRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprinBinario",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
